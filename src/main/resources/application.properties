spring.application.name=demo-oauth2-client

# Configuración de la base de datos
spring.datasource.url=jdbc:mysql://127.0.0.1:3308/test?useSSL=false&serverTimezone=America/Mexico_City&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=admin
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA/Hibernate
spring.jpa.show-sql=false
# Table names physically
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Configuración de OAuth2 con GitHub

# ID de cliente de la app registrada en GitHub
spring.security.oauth2.client.registration.github.client-id=TU_CLIENT_ID

# Secreto de cliente de la app registrada en GitHub
spring.security.oauth2.client.registration.github.client-secret=TU_CLIENT_SECRET

# Permisos (scopes) que se solicitan al usuario al autenticarse con GitHub.
# "read:user" permite leer información básica del perfil del usuario.
# "user:email" permite acceder a las direcciones de correo electrónico del usuario.
spring.security.oauth2.client.registration.github.scope=read:user,user:email

# URL a la que GitHub redirige tras la autenticación
# Endpoint interno que Spring Security crea automáticamente para recibir la respuesta de GitHub tras la autenticación.
# No es necesario implementarlo manualmente; Spring lo gestiona y procesa el código de autorización recibido.
# Si tu app corre en http://localhost:8080, la URL final será: http://localhost:8080/login/oauth2/code/github
# El valor registrationId (github) proviene de la configuración de tu proveedor OAuth2, que viene de la linea: 'spring.security.oauth2.client.registration.github.client-id='
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# *************************************************************************************************
# ***** https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps *****
# *************************************************************************************************
# URL para iniciar el proceso de autorización OAuth2
spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize

# URL para obtener el token de acceso
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token

# URL para obtener la información del usuario autenticado
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
# *************************************************************************************************
# ***** https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps *****
# *************************************************************************************************

# Cuando tu app recibe la información del usuario desde GitHub (en formato JSON), necesita saber qué campo usar como identificador principal del usuario.
# En la respuesta de GitHub, el campo "login" contiene el nombre de usuario público (por ejemplo, "ivanetinajero").
# Spring Security usará ese campo para identificar al usuario autenticado en tu aplicación.
spring.security.oauth2.client.provider.github.user-name-attribute=login

spring.jpa.open-in-view=false
